(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var counter = function counter() {
	var state = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
	var action = arguments[1];

	switch (action.type) {
		case 'INCREMENT':
			return state + 1;

		case 'DECREMENT':
			return state - 1;

		default:
			return state;
	}
};

var Counter = function Counter(_ref) {
	var value = _ref.value;
	var onIncrement = _ref.onIncrement;
	var onDecrement = _ref.onDecrement;
	return React.createElement(
		'div',
		null,
		React.createElement(
			'h1',
			null,
			value
		),
		React.createElement(
			'button',
			{ onClick: onIncrement },
			'+'
		),
		React.createElement(
			'button',
			{ onClick: onDecrement },
			'-'
		)
	);
};

var _Redux = Redux;
var createStore = _Redux.createStore;

var store = createStore(counter);

var render = function render() {
	ReactDOM.render(React.createElement(Counter, {
		value: store.getState(),
		onIncrement: function onIncrement() {
			return store.dispatch({
				type: 'INCREMENT'
			});
		},
		onDecrement: function onDecrement() {
			return store.dispatch({
				type: 'DECREMENT'
			});
		}
	}), document.getElementById('root'));
};

store.subscribe(render);
render();

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvMDJfUmVhY3RfQ291bnRlci9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBQSxJQUFNLE9BQU8sR0FBRyxTQUFWLE9BQU8sR0FBMEI7S0FBdEIsS0FBSyx5REFBRyxDQUFDO0tBQUUsTUFBTTs7QUFDakMsU0FBTyxNQUFNLENBQUMsSUFBSTtBQUNqQixPQUFLLFdBQVc7QUFDZixVQUFPLEtBQUssR0FBRyxDQUFDLENBQUM7O0FBQUEsQUFFbEIsT0FBSyxXQUFXO0FBQ2YsVUFBTyxLQUFLLEdBQUcsQ0FBQyxDQUFDOztBQUFBLEFBRWxCO0FBQ0MsVUFBTyxLQUFLLENBQUM7QUFBQSxFQUNkO0NBQ0QsQ0FBQzs7QUFFRixJQUFNLE9BQU8sR0FBRyxTQUFWLE9BQU87S0FDWixLQUFLLFFBQUwsS0FBSztLQUNMLFdBQVcsUUFBWCxXQUFXO0tBQ1gsV0FBVyxRQUFYLFdBQVc7UUFFWDs7O0VBQ0M7OztHQUFNLEtBQUs7R0FBTztFQUNsQjs7S0FBUSxPQUFPLEVBQUcsV0FBVyxBQUFFOztHQUFXO0VBQzFDOztLQUFRLE9BQU8sRUFBRyxXQUFXLEFBQUU7O0dBQVc7RUFDckM7Q0FDTixDQUFDOzthQUVzQixLQUFLO0lBQXJCLFdBQVcsVUFBWCxXQUFXOztBQUNuQixJQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7O0FBRW5DLElBQU0sTUFBTSxHQUFHLFNBQVQsTUFBTSxHQUFTO0FBQ3BCLFNBQVEsQ0FBQyxNQUFNLENBQ2Qsb0JBQUMsT0FBTztBQUNQLE9BQUssRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLEFBQUM7QUFDeEIsYUFBVyxFQUFFO1VBQ1osS0FBSyxDQUFDLFFBQVEsQ0FBQztBQUNkLFFBQUksRUFBRSxXQUFXO0lBQ2pCLENBQUM7R0FBQSxBQUNGO0FBQ0QsYUFBVyxFQUFFO1VBQ1osS0FBSyxDQUFDLFFBQVEsQ0FBQztBQUNkLFFBQUksRUFBRSxXQUFXO0lBQ2pCLENBQUM7R0FBQSxBQUNGO0dBQ0EsRUFDRixRQUFRLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUMvQixDQUFDO0NBQ0YsQ0FBQzs7QUFFRixLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hCLE1BQU0sRUFBRSxDQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImNvbnN0IGNvdW50ZXIgPSAoc3RhdGUgPSAwLCBhY3Rpb24pID0+IHtcblx0c3dpdGNoKGFjdGlvbi50eXBlKSB7XG5cdFx0Y2FzZSAnSU5DUkVNRU5UJzpcblx0XHRcdHJldHVybiBzdGF0ZSArIDE7XG5cblx0XHRjYXNlICdERUNSRU1FTlQnOlxuXHRcdFx0cmV0dXJuIHN0YXRlIC0gMTtcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gc3RhdGU7XG5cdH1cbn07XG5cbmNvbnN0IENvdW50ZXIgPSAoe1xuXHR2YWx1ZSxcblx0b25JbmNyZW1lbnQsXG5cdG9uRGVjcmVtZW50XG59KSA9PiAoXG5cdDxkaXY+XG5cdFx0PGgxPnsgdmFsdWUgfTwvaDE+XG5cdFx0PGJ1dHRvbiBvbkNsaWNrPXsgb25JbmNyZW1lbnQgfT4rPC9idXR0b24+XG5cdFx0PGJ1dHRvbiBvbkNsaWNrPXsgb25EZWNyZW1lbnQgfT4tPC9idXR0b24+XG5cdDwvZGl2PlxuKTtcblxuY29uc3QgeyBjcmVhdGVTdG9yZSB9ID0gUmVkdXg7XG5jb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKGNvdW50ZXIpO1xuXG5jb25zdCByZW5kZXIgPSAoKSA9PiB7XG5cdFJlYWN0RE9NLnJlbmRlciAoXG5cdFx0PENvdW50ZXIgXG5cdFx0XHR2YWx1ZT17c3RvcmUuZ2V0U3RhdGUoKX1cblx0XHRcdG9uSW5jcmVtZW50PXsoKSA9PiBcblx0XHRcdFx0c3RvcmUuZGlzcGF0Y2goe1xuXHRcdFx0XHRcdHR5cGU6ICdJTkNSRU1FTlQnXG5cdFx0XHRcdH0pXG5cdFx0XHR9XG5cdFx0XHRvbkRlY3JlbWVudD17KCkgPT4gXG5cdFx0XHRcdHN0b3JlLmRpc3BhdGNoKHtcblx0XHRcdFx0XHR0eXBlOiAnREVDUkVNRU5UJ1xuXHRcdFx0XHR9KVxuXHRcdFx0fVxuXHRcdC8+LFxuXHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290Jylcblx0KTtcbn07XG5cbnN0b3JlLnN1YnNjcmliZShyZW5kZXIpO1xucmVuZGVyKCk7XG4iXX0=
